version: '3.8'

services:
  # YouTube Data Pipeline
  youtube-pipeline:
    build: .
    container_name: youtube-data-pipeline
    environment:
      - PYTHONPATH=/app/src
    env_file:
      - .env
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
    depends_on:
      - postgres
    networks:
      - youtube-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: youtube-postgres
    environment:
      POSTGRES_DB: youtube_analytics
      POSTGRES_USER: youtube_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-youtube_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - youtube-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youtube_user -d youtube_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4
    container_name: youtube-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@youtube-pipeline.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    networks:
      - youtube-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Monitoring Dashboard (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: youtube-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana123}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - youtube-network
    restart: unless-stopped
    depends_on:
      - postgres

volumes:
  postgres_data:
  grafana_data:

networks:
  youtube-network:
    driver: bridge